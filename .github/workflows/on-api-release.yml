name: on-api-release

on:
  release:
    types: [ published ]

env:
  GITHUB_PUSH_TOKEN: ${{ secrets.INTERSCRIPT_CI_PAT }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    # id=68949242 => interscript-ci user
    if: ${{ github.event.release.author.id == 68949242 }}  #contains(github.event.release.body, '#releaseed-by-ci')
    steps:
      - uses: actions/checkout@v2
      - name: setup env vars
        run: |
          RELEASE_BODY="${{github.event.release.body}}"
          echo "RELEASE_BODY=$RELEASE_BODY" >> ${GITHUB_ENV}
          RELEASE_TAG_NAME="${{github.event.release.tag_name}}"
          echo "RELEASE_TAG_NAME=$RELEASE_TAG_NAME" >> ${GITHUB_ENV}
          GEM_VERSION=$(echo "$RELEASE_BODY" | grep -Po '(?<=v)[^;]+')
          echo "GEM_VERSION=$GEM_VERSION" >> ${GITHUB_ENV}
          echo "INTERSCRIPT_GEM_VERSION=$GEM_VERSION" >> ${GITHUB_ENV}

      - name: prepare docker context
        working-directory: .github/lambda
        run: |
          bash build.sh

      - name: push to github package
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          workdir: .github/lambda
          dockerfile: Dockerfile
          tags: "latest,${{env.RELEASE_TAG_NAME}}"
          registry: "docker.pkg.github.com"
          name: "${{github.repository}}/awslambda-interscript-api"
          username: "${{github.actor}}"
          password: "${{env.GITHUB_PUSH_TOKEN}}"
          buildargs: INTERSCRIPT_GEM_VERSION

      - name: setup-aws-credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: ecr-login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: push to ecr
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        working-directory: .github/lambda
        run: |
          docker build -t $ECR_REGISTRY/interscript-api:${{env.RELEASE_TAG_NAME}} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{env.RELEASE_TAG_NAME}}




#      - name: push to github package
#        uses: elgohr/Publish-Docker-Github-Action@master
#        with:
#          workdir: .github/lambda
#          dockerfile: Dockerfile
#          tags: "latest,${{env.RELEASE_TAG_NAME}}"
#          registry: ""
#          name: "awslambda-interscript-api"
#          username: "${{env.AWS_ACCESS_KEY_ID}}"
#          password: "${{env.}}"
#          buildargs: INTERSCRIPT_GEM_VERSION

#      - name: login github package
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: user/app:latest

#      - name: setup ruby+install
#        uses: ruby/setup-ruby@v1.75.0
#        with:
#          bundler-cache: false
#          ruby-version: 2.7

#      - name: build "-api" source
#        working-directory: git
#        run: |
#          cp Gemfile* lib/
#          zip -r ${AWSL_SRC_ZIP} lib

#      - name: build "-layer"
#        working-directory: git/.github/awsl-layer-docker
#        run: |
#          ls -all
#          bash build.sh
#          cp libs.zip $AWSL_LAYER_ZIP

#      - name: upload lambda layer to current release
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{env.RELEASE_TAG_NAME}}
#          files: |
#            ${{env.AWSL_SRC_ZIP}}
#            ${{env.AWSL_LAYER_ZIP}}

#      - name: dispatch "infrastructure-lambda-api"
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          token: ${{ env.GITHUB_PUSH_TOKEN }}
#          repository: interscript/infrastructure-lambda-api
#          event-type: ${{ github.repository }}
#          client-payload: >-
#            {
#              "workflow": "on-api-release.yml",
#              "api_tag_name": "${{env.RELEASE_TAG_NAME}}"
#            }
